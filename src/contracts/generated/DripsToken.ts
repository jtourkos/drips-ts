/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type SplitsReceiverStruct = { receiver: string; weight: BigNumberish };

export type SplitsReceiverStructOutput = [string, number] & {
  receiver: string;
  weight: number;
};

export type InputTypeStruct = {
  nftTypeId: BigNumberish;
  limit: BigNumberish;
  minAmt: BigNumberish;
  streaming: boolean;
  ipfsHash: string;
};

export type InputTypeStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  string
] & {
  nftTypeId: BigNumber;
  limit: BigNumber;
  minAmt: BigNumber;
  streaming: boolean;
  ipfsHash: string;
};

export interface DripsTokenInterface extends utils.Interface {
  functions: {
    "active(uint256)": FunctionFragment;
    "activeUntil(uint256)": FunctionFragment;
    "addStreamingType(uint128,uint64,uint128,string)": FunctionFragment;
    "addType(uint128,uint64,uint128,string)": FunctionFragment;
    "addTypes((uint128,uint64,uint128,bool,string)[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authMint(address,uint128,uint128)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "builder()": FunctionFragment;
    "changeBuilder(address)": FunctionFragment;
    "changeContractURI(string)": FunctionFragment;
    "changeSplitsReceivers((address,uint32)[],(address,uint32)[])": FunctionFragment;
    "collect((address,uint32)[])": FunctionFragment;
    "collectable((address,uint32)[])": FunctionFragment;
    "contractURI()": FunctionFragment;
    "createTokenId(uint128,uint128)": FunctionFragment;
    "currLeftSecsInCycle()": FunctionFragment;
    "cycleSecs()": FunctionFragment;
    "dai()": FunctionFragment;
    "deployer()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "hub()": FunctionFragment;
    "influence(uint256)": FunctionFragment;
    "init(string,string,address,string,(uint128,uint64,uint128,bool,string)[],address,(address,uint32)[])": FunctionFragment;
    "initialized()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(address,uint128,uint128)": FunctionFragment;
    "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "mintStreaming(address,uint128,uint128,uint128)": FunctionFragment;
    "name()": FunctionFragment;
    "nftTypes(uint128)": FunctionFragment;
    "nfts(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "streaming(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenType(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "topUp(uint256,uint128)": FunctionFragment;
    "topUp(uint256,uint128,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256,uint128)": FunctionFragment;
    "withdrawable(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "active"
      | "activeUntil"
      | "addStreamingType"
      | "addType"
      | "addTypes"
      | "approve"
      | "authMint"
      | "balanceOf"
      | "builder"
      | "changeBuilder"
      | "changeContractURI"
      | "changeSplitsReceivers"
      | "collect"
      | "collectable"
      | "contractURI"
      | "createTokenId"
      | "currLeftSecsInCycle"
      | "cycleSecs"
      | "dai"
      | "deployer"
      | "getApproved"
      | "hub"
      | "influence"
      | "init"
      | "initialized"
      | "isApprovedForAll"
      | "mint(address,uint128,uint128)"
      | "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"
      | "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"
      | "mintStreaming(address,uint128,uint128,uint128)"
      | "name"
      | "nftTypes"
      | "nfts"
      | "owner"
      | "ownerOf"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "streaming"
      | "supportsInterface"
      | "symbol"
      | "tokenType"
      | "tokenURI"
      | "topUp(uint256,uint128)"
      | "topUp(uint256,uint128,uint256,uint256,uint8,bytes32,bytes32)"
      | "transferFrom"
      | "transferOwnership"
      | "withdraw"
      | "withdrawable"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "active",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeUntil",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addStreamingType",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addType",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTypes",
    values: [InputTypeStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authMint",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "builder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeBuilder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSplitsReceivers",
    values: [SplitsReceiverStruct[], SplitsReceiverStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [SplitsReceiverStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectable",
    values: [SplitsReceiverStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currLeftSecsInCycle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cycleSecs", values?: undefined): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "influence",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string,
      string,
      string,
      string,
      InputTypeStruct[],
      string,
      SplitsReceiverStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint128,uint128)",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintStreaming(address,uint128,uint128,uint128)",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nfts", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "streaming",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topUp(uint256,uint128)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topUp(uint256,uint128,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawable",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStreamingType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "builder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSplitsReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currLeftSecsInCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cycleSecs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "influence", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint128,uint128)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintStreaming(address,uint128,uint128,uint128)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "streaming", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "topUp(uint256,uint128)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topUp(uint256,uint128,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawable",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "NewBuilder(address)": EventFragment;
    "NewContractURI(string)": EventFragment;
    "NewStreamingToken(uint256,address,uint128,uint128,uint128)": EventFragment;
    "NewToken(uint256,address,uint128,uint128)": EventFragment;
    "NewType(uint128,uint64,uint128,bool,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SplitsUpdated(tuple[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBuilder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewContractURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStreamingToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SplitsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface NewBuilderEventObject {
  builder: string;
}
export type NewBuilderEvent = TypedEvent<[string], NewBuilderEventObject>;

export type NewBuilderEventFilter = TypedEventFilter<NewBuilderEvent>;

export interface NewContractURIEventObject {
  contractURI: string;
}
export type NewContractURIEvent = TypedEvent<
  [string],
  NewContractURIEventObject
>;

export type NewContractURIEventFilter = TypedEventFilter<NewContractURIEvent>;

export interface NewStreamingTokenEventObject {
  tokenId: BigNumber;
  receiver: string;
  typeId: BigNumber;
  topUp: BigNumber;
  amtPerSec: BigNumber;
}
export type NewStreamingTokenEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  NewStreamingTokenEventObject
>;

export type NewStreamingTokenEventFilter =
  TypedEventFilter<NewStreamingTokenEvent>;

export interface NewTokenEventObject {
  tokenId: BigNumber;
  receiver: string;
  typeId: BigNumber;
  giveAmt: BigNumber;
}
export type NewTokenEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  NewTokenEventObject
>;

export type NewTokenEventFilter = TypedEventFilter<NewTokenEvent>;

export interface NewTypeEventObject {
  nftType: BigNumber;
  limit: BigNumber;
  minAmt: BigNumber;
  streaming: boolean;
  ipfsHash: string;
}
export type NewTypeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean, string],
  NewTypeEventObject
>;

export type NewTypeEventFilter = TypedEventFilter<NewTypeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SplitsUpdatedEventObject {
  splits: SplitsReceiverStructOutput[];
}
export type SplitsUpdatedEvent = TypedEvent<
  [SplitsReceiverStructOutput[]],
  SplitsUpdatedEventObject
>;

export type SplitsUpdatedEventFilter = TypedEventFilter<SplitsUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface DripsToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DripsTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    active(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    activeUntil(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addStreamingType(
      newTypeId: BigNumberish,
      limit: BigNumberish,
      minAmtPerSec: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addType(
      newTypeId: BigNumberish,
      limit: BigNumberish,
      minGiveAmt: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTypes(
      inputTypes: InputTypeStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authMint(
      nftReceiver: string,
      typeId: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    builder(overrides?: CallOverrides): Promise<[string]>;

    changeBuilder(
      newBuilder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeContractURI(
      contractURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSplitsReceivers(
      currSplits: SplitsReceiverStruct[],
      newSplits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      currSplits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectable(
      currSplits: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { toCollect: BigNumber; toSplit: BigNumber }
    >;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    createTokenId(
      id: BigNumberish,
      nftType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId: BigNumber }>;

    currLeftSecsInCycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleSecs(overrides?: CallOverrides): Promise<[BigNumber]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hub(overrides?: CallOverrides): Promise<[string]>;

    influence(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { influenceScore: BigNumber }>;

    init(
      name_: string,
      symbol_: string,
      owner: string,
      contractURI_: string,
      inputTypes: InputTypeStruct[],
      builder_: string,
      splits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "mint(address,uint128,uint128)"(
      nftReceiver: string,
      typeId: BigNumberish,
      giveAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      nftReceiver: string,
      typeId: BigNumberish,
      amtGive: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      nftReceiver: string,
      typeId: BigNumberish,
      topUpAmt: BigNumberish,
      amtPerSec: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintStreaming(address,uint128,uint128,uint128)"(
      nftReceiver: string,
      typeId: BigNumberish,
      topUpAmt: BigNumberish,
      amtPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, string] & {
        limit: BigNumber;
        minted: BigNumber;
        minAmt: BigNumber;
        streaming: boolean;
        ipfsHash: string;
      }
    >;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timeMinted: BigNumber;
        amt: BigNumber;
        lastBalance: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    streaming(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenType(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nftType: BigNumber }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "topUp(uint256,uint128)"(
      tokenId: BigNumberish,
      topUpAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "topUp(uint256,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      tokenId: BigNumberish,
      topUpAmt: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      tokenId: BigNumberish,
      withdrawAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawable(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  active(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  activeUntil(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addStreamingType(
    newTypeId: BigNumberish,
    limit: BigNumberish,
    minAmtPerSec: BigNumberish,
    ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addType(
    newTypeId: BigNumberish,
    limit: BigNumberish,
    minGiveAmt: BigNumberish,
    ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTypes(
    inputTypes: InputTypeStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authMint(
    nftReceiver: string,
    typeId: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  builder(overrides?: CallOverrides): Promise<string>;

  changeBuilder(
    newBuilder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeContractURI(
    contractURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeSplitsReceivers(
    currSplits: SplitsReceiverStruct[],
    newSplits: SplitsReceiverStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    currSplits: SplitsReceiverStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectable(
    currSplits: SplitsReceiverStruct[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { toCollect: BigNumber; toSplit: BigNumber }
  >;

  contractURI(overrides?: CallOverrides): Promise<string>;

  createTokenId(
    id: BigNumberish,
    nftType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currLeftSecsInCycle(overrides?: CallOverrides): Promise<BigNumber>;

  cycleSecs(overrides?: CallOverrides): Promise<BigNumber>;

  dai(overrides?: CallOverrides): Promise<string>;

  deployer(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  hub(overrides?: CallOverrides): Promise<string>;

  influence(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    name_: string,
    symbol_: string,
    owner: string,
    contractURI_: string,
    inputTypes: InputTypeStruct[],
    builder_: string,
    splits: SplitsReceiverStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "mint(address,uint128,uint128)"(
    nftReceiver: string,
    typeId: BigNumberish,
    giveAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
    nftReceiver: string,
    typeId: BigNumberish,
    amtGive: BigNumberish,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
    nftReceiver: string,
    typeId: BigNumberish,
    topUpAmt: BigNumberish,
    amtPerSec: BigNumberish,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintStreaming(address,uint128,uint128,uint128)"(
    nftReceiver: string,
    typeId: BigNumberish,
    topUpAmt: BigNumberish,
    amtPerSec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nftTypes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, string] & {
      limit: BigNumber;
      minted: BigNumber;
      minAmt: BigNumber;
      streaming: boolean;
      ipfsHash: string;
    }
  >;

  nfts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timeMinted: BigNumber;
      amt: BigNumber;
      lastBalance: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  streaming(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenType(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "topUp(uint256,uint128)"(
    tokenId: BigNumberish,
    topUpAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "topUp(uint256,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
    tokenId: BigNumberish,
    topUpAmt: BigNumberish,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    tokenId: BigNumberish,
    withdrawAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawable(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    active(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    activeUntil(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStreamingType(
      newTypeId: BigNumberish,
      limit: BigNumberish,
      minAmtPerSec: BigNumberish,
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addType(
      newTypeId: BigNumberish,
      limit: BigNumberish,
      minGiveAmt: BigNumberish,
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTypes(
      inputTypes: InputTypeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    authMint(
      nftReceiver: string,
      typeId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    builder(overrides?: CallOverrides): Promise<string>;

    changeBuilder(newBuilder: string, overrides?: CallOverrides): Promise<void>;

    changeContractURI(
      contractURI_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSplitsReceivers(
      currSplits: SplitsReceiverStruct[],
      newSplits: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    collect(
      currSplits: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { collected: BigNumber; split: BigNumber }
    >;

    collectable(
      currSplits: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { toCollect: BigNumber; toSplit: BigNumber }
    >;

    contractURI(overrides?: CallOverrides): Promise<string>;

    createTokenId(
      id: BigNumberish,
      nftType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currLeftSecsInCycle(overrides?: CallOverrides): Promise<BigNumber>;

    cycleSecs(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<string>;

    deployer(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    hub(overrides?: CallOverrides): Promise<string>;

    influence(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      name_: string,
      symbol_: string,
      owner: string,
      contractURI_: string,
      inputTypes: InputTypeStruct[],
      builder_: string,
      splits: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mint(address,uint128,uint128)"(
      nftReceiver: string,
      typeId: BigNumberish,
      giveAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      nftReceiver: string,
      typeId: BigNumberish,
      amtGive: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      nftReceiver: string,
      typeId: BigNumberish,
      topUpAmt: BigNumberish,
      amtPerSec: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintStreaming(address,uint128,uint128,uint128)"(
      nftReceiver: string,
      typeId: BigNumberish,
      topUpAmt: BigNumberish,
      amtPerSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nftTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, string] & {
        limit: BigNumber;
        minted: BigNumber;
        minAmt: BigNumber;
        streaming: boolean;
        ipfsHash: string;
      }
    >;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timeMinted: BigNumber;
        amt: BigNumber;
        lastBalance: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    streaming(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenType(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "topUp(uint256,uint128)"(
      tokenId: BigNumberish,
      topUpAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "topUp(uint256,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      tokenId: BigNumberish,
      topUpAmt: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      tokenId: BigNumberish,
      withdrawAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawable(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "NewBuilder(address)"(builder?: null): NewBuilderEventFilter;
    NewBuilder(builder?: null): NewBuilderEventFilter;

    "NewContractURI(string)"(contractURI?: null): NewContractURIEventFilter;
    NewContractURI(contractURI?: null): NewContractURIEventFilter;

    "NewStreamingToken(uint256,address,uint128,uint128,uint128)"(
      tokenId?: BigNumberish | null,
      receiver?: string | null,
      typeId?: BigNumberish | null,
      topUp?: null,
      amtPerSec?: null
    ): NewStreamingTokenEventFilter;
    NewStreamingToken(
      tokenId?: BigNumberish | null,
      receiver?: string | null,
      typeId?: BigNumberish | null,
      topUp?: null,
      amtPerSec?: null
    ): NewStreamingTokenEventFilter;

    "NewToken(uint256,address,uint128,uint128)"(
      tokenId?: BigNumberish | null,
      receiver?: string | null,
      typeId?: BigNumberish | null,
      giveAmt?: null
    ): NewTokenEventFilter;
    NewToken(
      tokenId?: BigNumberish | null,
      receiver?: string | null,
      typeId?: BigNumberish | null,
      giveAmt?: null
    ): NewTokenEventFilter;

    "NewType(uint128,uint64,uint128,bool,string)"(
      nftType?: BigNumberish | null,
      limit?: null,
      minAmt?: null,
      streaming?: null,
      ipfsHash?: null
    ): NewTypeEventFilter;
    NewType(
      nftType?: BigNumberish | null,
      limit?: null,
      minAmt?: null,
      streaming?: null,
      ipfsHash?: null
    ): NewTypeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SplitsUpdated(tuple[])"(splits?: null): SplitsUpdatedEventFilter;
    SplitsUpdated(splits?: null): SplitsUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    active(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeUntil(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStreamingType(
      newTypeId: BigNumberish,
      limit: BigNumberish,
      minAmtPerSec: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addType(
      newTypeId: BigNumberish,
      limit: BigNumberish,
      minGiveAmt: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTypes(
      inputTypes: InputTypeStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authMint(
      nftReceiver: string,
      typeId: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    builder(overrides?: CallOverrides): Promise<BigNumber>;

    changeBuilder(
      newBuilder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeContractURI(
      contractURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeSplitsReceivers(
      currSplits: SplitsReceiverStruct[],
      newSplits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      currSplits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectable(
      currSplits: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    createTokenId(
      id: BigNumberish,
      nftType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currLeftSecsInCycle(overrides?: CallOverrides): Promise<BigNumber>;

    cycleSecs(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hub(overrides?: CallOverrides): Promise<BigNumber>;

    influence(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      name_: string,
      symbol_: string,
      owner: string,
      contractURI_: string,
      inputTypes: InputTypeStruct[],
      builder_: string,
      splits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(address,uint128,uint128)"(
      nftReceiver: string,
      typeId: BigNumberish,
      giveAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      nftReceiver: string,
      typeId: BigNumberish,
      amtGive: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      nftReceiver: string,
      typeId: BigNumberish,
      topUpAmt: BigNumberish,
      amtPerSec: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintStreaming(address,uint128,uint128,uint128)"(
      nftReceiver: string,
      typeId: BigNumberish,
      topUpAmt: BigNumberish,
      amtPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nfts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    streaming(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenType(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "topUp(uint256,uint128)"(
      tokenId: BigNumberish,
      topUpAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "topUp(uint256,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      tokenId: BigNumberish,
      topUpAmt: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      tokenId: BigNumberish,
      withdrawAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawable(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeUntil(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStreamingType(
      newTypeId: BigNumberish,
      limit: BigNumberish,
      minAmtPerSec: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addType(
      newTypeId: BigNumberish,
      limit: BigNumberish,
      minGiveAmt: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTypes(
      inputTypes: InputTypeStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authMint(
      nftReceiver: string,
      typeId: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    builder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeBuilder(
      newBuilder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeContractURI(
      contractURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeSplitsReceivers(
      currSplits: SplitsReceiverStruct[],
      newSplits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      currSplits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectable(
      currSplits: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createTokenId(
      id: BigNumberish,
      nftType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currLeftSecsInCycle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycleSecs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    influence(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      name_: string,
      symbol_: string,
      owner: string,
      contractURI_: string,
      inputTypes: InputTypeStruct[],
      builder_: string,
      splits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint128,uint128)"(
      nftReceiver: string,
      typeId: BigNumberish,
      giveAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      nftReceiver: string,
      typeId: BigNumberish,
      amtGive: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      nftReceiver: string,
      typeId: BigNumberish,
      topUpAmt: BigNumberish,
      amtPerSec: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintStreaming(address,uint128,uint128,uint128)"(
      nftReceiver: string,
      typeId: BigNumberish,
      topUpAmt: BigNumberish,
      amtPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    streaming(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenType(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "topUp(uint256,uint128)"(
      tokenId: BigNumberish,
      topUpAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "topUp(uint256,uint128,uint256,uint256,uint8,bytes32,bytes32)"(
      tokenId: BigNumberish,
      topUpAmt: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenId: BigNumberish,
      withdrawAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawable(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
