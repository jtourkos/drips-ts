/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type InputTypeStruct = {
  nftTypeId: BigNumberish;
  limit: BigNumberish;
  minAmt: BigNumberish;
  streaming: boolean;
  ipfsHash: string;
};

export type InputTypeStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  string
] & {
  nftTypeId: BigNumber;
  limit: BigNumber;
  minAmt: BigNumber;
  streaming: boolean;
  ipfsHash: string;
};

export type SplitsReceiverStruct = { receiver: string; weight: BigNumberish };

export type SplitsReceiverStructOutput = [string, number] & {
  receiver: string;
  weight: number;
};

export interface RadicleRegistryInterface extends utils.Interface {
  functions: {
    "builder()": FunctionFragment;
    "changeBuilder(address)": FunctionFragment;
    "changeTemplate(address)": FunctionFragment;
    "dripsToken(uint256)": FunctionFragment;
    "dripsTokenTemplate()": FunctionFragment;
    "newProject(string,string,address,string,(uint128,uint64,uint128,bool,string)[],(address,uint32)[])": FunctionFragment;
    "nextId()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "builder"
      | "changeBuilder"
      | "changeTemplate"
      | "dripsToken"
      | "dripsTokenTemplate"
      | "newProject"
      | "nextId"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "builder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeBuilder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dripsToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dripsTokenTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newProject",
    values: [
      string,
      string,
      string,
      string,
      InputTypeStruct[],
      SplitsReceiverStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "builder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dripsToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dripsTokenTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newProject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NewBuilder(address)": EventFragment;
    "NewProject(address,address,address,string)": EventFragment;
    "NewTemplate(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewBuilder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTemplate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface NewBuilderEventObject {
  builder: string;
}
export type NewBuilderEvent = TypedEvent<[string], NewBuilderEventObject>;

export type NewBuilderEventFilter = TypedEventFilter<NewBuilderEvent>;

export interface NewProjectEventObject {
  dripTokenTemplate: string;
  fundingToken: string;
  projectOwner: string;
  name: string;
}
export type NewProjectEvent = TypedEvent<
  [string, string, string, string],
  NewProjectEventObject
>;

export type NewProjectEventFilter = TypedEventFilter<NewProjectEvent>;

export interface NewTemplateEventObject {
  template: string;
}
export type NewTemplateEvent = TypedEvent<[string], NewTemplateEventObject>;

export type NewTemplateEventFilter = TypedEventFilter<NewTemplateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RadicleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RadicleRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    builder(overrides?: CallOverrides): Promise<[string]>;

    changeBuilder(
      newBuilder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeTemplate(
      newTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dripsToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    dripsTokenTemplate(overrides?: CallOverrides): Promise<[string]>;

    newProject(
      name: string,
      symbol: string,
      projectOwner: string,
      contractURI: string,
      inputTypes: InputTypeStruct[],
      splits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  builder(overrides?: CallOverrides): Promise<string>;

  changeBuilder(
    newBuilder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeTemplate(
    newTemplate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dripsToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  dripsTokenTemplate(overrides?: CallOverrides): Promise<string>;

  newProject(
    name: string,
    symbol: string,
    projectOwner: string,
    contractURI: string,
    inputTypes: InputTypeStruct[],
    splits: SplitsReceiverStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    builder(overrides?: CallOverrides): Promise<string>;

    changeBuilder(newBuilder: string, overrides?: CallOverrides): Promise<void>;

    changeTemplate(
      newTemplate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dripsToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    dripsTokenTemplate(overrides?: CallOverrides): Promise<string>;

    newProject(
      name: string,
      symbol: string,
      projectOwner: string,
      contractURI: string,
      inputTypes: InputTypeStruct[],
      splits: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewBuilder(address)"(builder?: null): NewBuilderEventFilter;
    NewBuilder(builder?: null): NewBuilderEventFilter;

    "NewProject(address,address,address,string)"(
      dripTokenTemplate?: null,
      fundingToken?: string | null,
      projectOwner?: string | null,
      name?: null
    ): NewProjectEventFilter;
    NewProject(
      dripTokenTemplate?: null,
      fundingToken?: string | null,
      projectOwner?: string | null,
      name?: null
    ): NewProjectEventFilter;

    "NewTemplate(address)"(template?: null): NewTemplateEventFilter;
    NewTemplate(template?: null): NewTemplateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    builder(overrides?: CallOverrides): Promise<BigNumber>;

    changeBuilder(
      newBuilder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeTemplate(
      newTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dripsToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dripsTokenTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    newProject(
      name: string,
      symbol: string,
      projectOwner: string,
      contractURI: string,
      inputTypes: InputTypeStruct[],
      splits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    builder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeBuilder(
      newBuilder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeTemplate(
      newTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dripsToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dripsTokenTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newProject(
      name: string,
      symbol: string,
      projectOwner: string,
      contractURI: string,
      inputTypes: InputTypeStruct[],
      splits: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
